/**
 * Created by rongyanzry on 16/3/18.
 */

var kScale = 1.5,
    kAutoresizingMask = "kAutoresizingMask";

var FixedSizeMask = {
    kLeftMargin: 1,   // margin left 固定长度
    kRightMargin: 1 << 1,
    kTopMargin: 1 << 2,
    kBottomMargin: 1 << 3,
    kWidth: 1 << 4,
    kHeight: 1 << 5
};

//--------------------------------------//
//               artboard               //
//--------------------------------------//

var onRun = function (context) {
    //  test
    initContext(context);
    // 当前选择的画板
    page.deselectAllLayers();
    selectedArtboard.setIsSelected(true);

    var artboardEnumerator = artboards.objectEnumerator();
    while (artboard = artboardEnumerator.nextObject()) {
        if (artboard == selectedArtboard) continue;
        if (Size.getTop(artboard) != Size.getTop(selectedArtboard)
            || Size.getLeft(artboard) <= Size.getLeft(selectedArtboard)) continue;
        // 画板位置调整
        Size.setLeft(artboard, Size.getLeft(artboard) + Size.getWidth(selectedArtboard));
    }

    // 复制画板
    var action = doc.actionsController().actionWithName("MSCanvasActions");
    action.duplicate(nil);

    // 复制后,当前页面有新增的画板
    artboards = page.artboards();

    artboardEnumerator = artboards.objectEnumerator();
    while (artboard = artboardEnumerator.nextObject()) {
        if (artboard == selectedArtboard) continue;

        // 选择当前画板右边的画板
        if (Size.getTop(artboard) != Size.getTop(selectedArtboard)
            || Size.getLeft(artboard) <= Size.getLeft(selectedArtboard)) continue;

        // scale artboard
        Size.scaleFrame(artboard, kScale);

        //var layerEnumerator = artboard.children().objectEnumerator();
        var layerEnumerator = artboard.layers().array().objectEnumerator();
        //while (layer = layerEnumerator.nextObject()) {
        //    if (layer == undefined || isLayerClass(layer, "MSArtboardGroup")) continue;
        loopThrough(layerEnumerator, function (layer) {
            var fixedMasks = getAutoresizingConstains(layer);
            if (fixedMasks == null || fixedMasks == 0) {
                resizingDefaultMode(layer);
            } else {
                resizingView(layer, fixedMasks);
            }
        });

        //if (isLayerClass(layer, "MSShapeGroup") || isLayerClass(layer, "MSLayerGroup")) {
        //    // 组的区域根据子视图适配,只调origin位置,不调高宽;
        //    Size.scaleOrigin(layer, kScale);
        //    continue;
        //}
        //
        //var fixedMasks = getAutoresizingConstains(currentLayer);
        //if (fixedMasks == null || fixedMasks == 0) {
        //    log("bbb");
        //    log(fixedMasks);
        //    resizingDefaultMode(layer);
        //    log(layer.frame())
        //} else {
        //    log ("有固定值");
        //    resizingView(layer, fixedMasks);
        //}
        //}
    }
};

var setFixedMasks = function (context) {

    initContext(context);
    var alertWindow = new AlertWindow();
    alertWindow.updateCheckbox(getAutoresizingConstains(currentLayer));
    if (alertWindow.runAlert() == "1000") {
        // "OK"
        setAutoresizingConstains(currentLayer, alertWindow.getValue());
    }
};

//--------------------------------------//
//              Layer Resizing          //
//--------------------------------------//

var resizingDefaultMode = function (layer) {

    if (isLayerClass(layer, "MSTextLayer")) {
        resizingView(layer, FixedSizeMask.kWidth | FixedSizeMask.kHeight);
    } else {
        Size.scaleFrame(layer, kScale);
    }
};

var resizingView = function (layer, sizeMask) {

    if (layer == undefined || sizeMask == 0) return;

    // 求水平固定不变的宽度
    var fixedW = 0;
    if ((sizeMask & FixedSizeMask.kLeftMargin)) fixedW += Size.getLeft(layer);
    if ((sizeMask & FixedSizeMask.kWidth)) fixedW += Size.getWidth(layer);
    if ((sizeMask & FixedSizeMask.kRightMargin)) fixedW += Size.getOldRight(layer);

    // 水平缩放的比例
    var flexibleRatio = (Size.getParentOldWidth(layer) - fixedW) / (Size.getParentWidth(layer) - fixedW);
    // 求水平自动改变尺寸的宽度
    if ((sizeMask & FixedSizeMask.kLeftMargin) == 0) {
        Size.setLeft(layer, Size.getLeft(layer) / flexibleRatio)
    }

    // resize frame
    if ((sizeMask & FixedSizeMask.kWidth) == 0) {
        Size.setWidth(layer, Size.getWidth(layer) / flexibleRatio);
    }

    //
    fixedW = 0;
    if ((sizeMask & FixedSizeMask.kTopMargin)) fixedW += Size.getTop(layer);
    if (sizeMask & FixedSizeMask.kHeight) fixedW += Size.getHeight(layer);
    if (sizeMask & FixedSizeMask.kBottomMargin) fixedW += Size.getOldBottom(layer);

    flexibleRatio = (Size.getParentOldHeight(layer) - fixedW) / (Size.getParentHeight(layer) - fixedW);

    if ((sizeMask & FixedSizeMask.kTopMargin) == 0) {
        Size.setTop(layer, Size.getTop(layer) / flexibleRatio);
    }

    if ((sizeMask & FixedSizeMask.kHeight) == 0) {
        Size.setHeight(layer, Size.getHeight(layer) / flexibleRatio);
    }
};


// 将mask存在layer中
var setAutoresizingConstains = function (currentLayer, sizeMask) {
    if (currentLayer == undefined) return;
    command.setValue_forKey_onLayer(sizeMask, kAutoresizingMask, currentLayer);
};

//
var getAutoresizingConstains = function (currentLayer) {
    if (currentLayer == undefined) return;
    return command.valueForKey_onLayer(kAutoresizingMask, currentLayer);
};


//--------------------------------------//
//                Layers                //
//--------------------------------------//

function loopThrough(layerLoop, callback) {
    while (layer = layerLoop.nextObject()) {
        if (isLayerClass(layer, "MSShapeGroup") || isLayerClass(layer, "MSLayerGroup")) {
            // 组的区域根据子视图适配,只调origin位置,不调高宽;
            Size.scaleOrigin(layer, kScale);
            //log(layer);
            var layers = layer.layers().array(),
                layersInsideLoop = layers.objectEnumerator();
            //log(layer)
            loopThrough(layersInsideLoop, callback);
            //log(layer);
            //Size.setFrame(layer, maxSizeOfSubLayer(layers));
            //log("hh" + layer.className());
            //log(layer.frame());
        } else {
            callback(layer)
        }
    }
};

function maxSizeOfSubLayer(layers) {
    var layersInsideLoop = layers.objectEnumerator(),
        maxX = 0,
        maxY = 0,
        maxWidth = 0,
        maxHeight = 0;
    while (sublayer = layersInsideLoop.nextObject()) {
        maxX = maxX > Size.getLeft(sublayer) ? maxX : Size.getLeft(sublayer);
        maxY = maxY > Size.getTop(sublayer) ? maxY : Size.getTop(sublayer);
        maxWidth = maxWidth > Size.getWidth(sublayer) ? maxWidth : Size.getWidth(sublayer);
        maxHeight = maxHeight > Size.getHeight(sublayer) ? maxHeight : Size.getHeight(sublayer);
    }
    return [maxX, maxY, maxWidth, maxHeight];
}

var isLayerClass = function (layer, className) {
    return Boolean(layer.className() == className);
};

//--------------------------------------//
//               Context                //
//--------------------------------------//

var app = NSApplication.sharedApplication(),
    selection,
    plugin,
    command,
    doc,
    page,
    artboards,
    selectedArtboard;

function initContext(context) {
    doc = context.document,
        plugin = context.plugin,
        command = context.command,
        page = doc.currentPage(),
        artboards = page.artboards(),
        selectedArtboard = page.currentArtboard(),
        selection = context.selection,
        currentLayer = (selection.count() > 0) ? selection[0] : undefined
}

//--------------------------------------//
//               size                   //
//--------------------------------------//

Size = {

    // getter
    getParentOldWidth: function (layer) {
        return layer.parentGroup().frame().width() / kScale;
    },

    getParentOldHeight: function (layer) {
        return layer.parentGroup().frame().height() / kScale;
    },

    getParentWidth: function (layer) {
        return layer.parentGroup().frame().width();
    },

    getParentHeight: function (layer) {
        return layer.parentGroup().frame().height();
    },

    getWidth: function (layer) {
        return layer.frame().width();
    },

    getHeight: function (layer) {
        return layer.frame().height();
    },

    getLeft: function (layer) {
        return layer.frame().x();
    },

    getTop: function (layer) {
        return layer.frame().y();
    },

    getOldRight: function (layer) {
        return this.getParentOldWidth(layer) - layer.frame().x() - layer.frame().width();
    },

    getOldBottom: function (layer) {
        return this.getParentOldHeight(layer) - layer.frame().y() - layer.frame().height()
    },

    // setter
    setWidth: function (layer, width) {
        layer.frame().setWidth(width);
    },

    setHeight: function (layer, height) {
        layer.frame().setHeight(height);
    },

    setLeft: function (layer, x) {
        layer.frame().setX(x);
    },

    setTop: function (layer, y) {
        layer.frame().setY(y);

    },

    setFrame: function (layer, sizes) {
        if (sizes == null || sizes == undefined || sizes.length != 4) return;
        var left = this.getLeft(layer);
        var top = this.getTop(layer);
        var width = this.getWidth(layer);
        var height = this.getHeight(layer);

        sizes[0] > left ? this.setLeft(layer, sizes[0]) : log(left);
        sizes[1] > top ? this.setTop(layer, sizes[1]) : log(top);
        sizes[2] > width ? this.setWidth(layer, sizes[2]) : log(width);
        sizes[3] > height ? this.setHeight(layer, sizes[3]) : log(height);
    },

    // scale
    scaleFrame: function (layer, radio) {
        layer.frame().scaleBy(radio);
    },

    scaleOrigin: function (layer, radio) {
        layer.frame().setX(this.getLeft(layer) * radio);
        layer.frame().setY(this.getTop(layer) * radio);
        layer.resizeToFitChildrenWithOption(1);
    }

};

//--------------------------------------//
//               Cocoa UI               //
//--------------------------------------//

function AlertWindow() {
    var kMainViewWidth = 220,
        kMainViewHeight = 140,
        kCheckboxWidth = 100,
        kCheckboxHeight = 30,
        kCheckboxPaddingTop = 5,
        contentHeight = 20;
    this.alert = COSAlertWindow.new();
    this.alert.addButtonWithTitle("OK");
    this.alert.setMessageText("请勾选固定长度的元素:");

    this.mainView = NSView.alloc().initWithFrame(NSMakeRect(0, 0, kMainViewWidth, kMainViewHeight)),
        this.withCheckbox = createCheckbox("width", false, NSMakeRect(0, contentHeight, kCheckboxWidth, kCheckboxHeight));
    this.mainView.addSubview(this.withCheckbox);
    this.heightCheckbox = createCheckbox("height", false, NSMakeRect(kMainViewWidth - kCheckboxWidth, contentHeight, kCheckboxWidth, kCheckboxHeight));
    this.mainView.addSubview(this.heightCheckbox);

    contentHeight += kCheckboxPaddingTop + kCheckboxHeight;

    this.marginTopCheckbox = createCheckbox("margin top", false, NSMakeRect(0, contentHeight,
        kCheckboxWidth, kCheckboxHeight));
    this.marginBottomCheckbox = createCheckbox("margin bottom", false, NSMakeRect((kMainViewWidth - kCheckboxWidth), contentHeight, kCheckboxWidth, kCheckboxHeight));
    this.mainView.addSubview(this.marginBottomCheckbox);
    this.mainView.addSubview(this.marginTopCheckbox);

    contentHeight += kCheckboxPaddingTop + kCheckboxHeight;

    this.marginLeftCheckbox = createCheckbox("margin left", false, NSMakeRect(0, contentHeight, kCheckboxWidth, kCheckboxHeight));
    this.mainView.addSubview(this.marginLeftCheckbox);
    this.marginRightCheckbox = createCheckbox("margin right", false, NSMakeRect(kMainViewWidth - kCheckboxWidth, contentHeight, kCheckboxWidth, kCheckboxHeight));
    this.mainView.addSubview(this.marginRightCheckbox);

    this.alert.addAccessoryView(this.mainView);

    this.getValue = function () {
        var fixedSizeMasks = 0;
        if (this.marginLeftCheckbox.state()) fixedSizeMasks |= FixedSizeMask.kLeftMargin;
        if (this.marginRightCheckbox.state()) fixedSizeMasks |= FixedSizeMask.kRightMargin;
        if (this.marginTopCheckbox.state()) fixedSizeMasks |= FixedSizeMask.kTopMargin;
        if (this.marginBottomCheckbox.state()) fixedSizeMasks |= FixedSizeMask.kBottomMargin;
        if (this.withCheckbox.state()) fixedSizeMasks |= FixedSizeMask.kWidth;
        if (this.heightCheckbox.state()) fixedSizeMasks |= FixedSizeMask.kHeight;

        return fixedSizeMasks;
    };

    this.updateCheckbox = function (fixedSizeMasks) {
        if (fixedSizeMasks == null) return;
        this.marginLeftCheckbox.setState((fixedSizeMasks & FixedSizeMask.kLeftMargin) ? NSOnState : NSOffState);
        this.marginRightCheckbox.setState((fixedSizeMasks & FixedSizeMask.kRightMargin) ? NSOnState : NSOffState);
        this.marginTopCheckbox.setState((fixedSizeMasks & FixedSizeMask.kTopMargin) ? NSOnState : NSOffState);
        this.marginBottomCheckbox.setState((fixedSizeMasks & FixedSizeMask.kBottomMargin) ? NSOnState : NSOffState);
        this.withCheckbox.setState((fixedSizeMasks & FixedSizeMask.kWidth) ? NSOnState : NSOffState);
        this.heightCheckbox.setState((fixedSizeMasks & FixedSizeMask.kHeight) ? NSOnState : NSOffState);
    };

    this.runAlert = function () {
        return this.alert.runModal();
    }
}

function createCheckbox(text, checked, frame) {
    checked = (checked == false) ? NSOffState : NSOnState;
    var checkbox = NSButton.alloc().initWithFrame(frame);
    checkbox.setButtonType(NSSwitchButton);
    checkbox.setBezelStyle(0);
    checkbox.setTitle(text);
    checkbox.setState(checked);

    return checkbox
}

function exists(el) {
    var value = false;
    if (typeof el !== "undefined" && el !== null) {
        value = true
    }

    return value
}



